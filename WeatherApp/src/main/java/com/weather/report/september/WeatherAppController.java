package com.weather.report.september;

/**
 * File Name:
 * Descr:to write a program that calculates how much precipitation has fallen at 33309 during the current year.
 * @author Krishna
 */
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

@Path("/api")
public class WeatherAppController {

	/**
	 * Main client to test in the local ide
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try {

			int limit = 25;
			int offset = 1;
			String dataSet = getPrecipitationData(limit, offset, getStartDate(),getEndDate());
			System.out.println(calculateTotalCount(dataSet, limit, offset));

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * http method to make the internal get calls and calculate the total value
	 */
	@GET
	@Path("/getTotalValues")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getTotalValues() {
		
		PrecipitationCount responseObj= new PrecipitationCount();
		try {

			int limit = 25;
			int offset = 1;
			responseObj.startDate=getStartDate();
			responseObj.endData=getEndDate();
			String dataSet = getPrecipitationData(limit, offset, getStartDate(),getEndDate());
			
			responseObj.count= calculateTotalCount(dataSet, limit, offset);

		} catch (Exception e) {

			e.printStackTrace();
			
		}
		return Response.status(200).entity(responseObj).build();// -1 on error
		//return "done";
	}

	/**
	 * getParentJson: This method composes the url call to the ncdc domain. Sets the
	 * request method, appends the token shared in the HTTP header and sets
	 * content-type to application json
	 * 
	 * @param limit
	 * @param offset
	 * @return
	 */

	public static String getPrecipitationData(int limit, int offset, String startDate, String endDate) {
		StringBuilder sb = new StringBuilder(); // using a string builder to store the response. For multi threaded
												// environment stringbuffer is preffered
		try {
			/**
			 * REST URL: url object created with the zip code hardcoded with the domain
			 * string. The limit, offset are passed for each call. Startdate and enddate can
			 * be passed as variables to make it more open for n number of calls
			 */
			URL url = new URL(
					"https://www.ncdc.noaa.gov/cdo-web/api/v2/data?datasetid=GHCND&locationid=ZIP:33309&startdate="
							+ startDate + "&enddate=" + endDate+ "&limit=" + limit + "&offset=" + offset);
			 System.out.println("URL Executing==> " + url.toString());
			/**
			 * Set http connection params requestMethod, token based authentication, accept
			 * type
			 */
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");
			conn.setRequestProperty("token", "EVsHKopYoOqeGEVaQXQszifvBJEAfbSg");
			/**
			 * Trigger call to url, if response code is not 200 ( Server OK) then throw the
			 * runtime exception
			 */
			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
			}
			/**
			 * Read the Response
			 */
			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

			String output1 = "";
			while ((output1 = br.readLine()) != null) {
				sb.append(output1);
			}
			conn.disconnect();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sb.toString();
	}

	/**
	 * readJson: This method reads the response generated by the rest api call.
	 * @param jsonStr
	 * @param limit
	 * @param offset
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static double calculateTotalCount(String jsonStr, int limit, int offset) {
		JSONParser parser = new JSONParser();
		double totalValue = 0;
		int count = 0;
		try {
			Object obj = parser.parse(jsonStr);
			JSONObject jsonArray = (JSONObject) obj;
			if(jsonArray.get("metadata")!=null )
			{
			JSONObject metaDataArr = (JSONObject) jsonArray.get("metadata");
			JSONObject resultset = (JSONObject) metaDataArr.get("resultset");

	
			Iterator<Map.Entry> resultSetItr = resultset.entrySet().iterator();
			while (resultSetItr.hasNext()) {
				Map.Entry pair = resultSetItr.next();
				if (pair.getKey().toString().equalsIgnoreCase("count")) {
					count = Integer.valueOf(pair.getValue().toString()); //store the total count
				}
			}

			// Fetching the result set object
			JSONArray results = (JSONArray) jsonArray.get("results");
			Iterator resultsItr = results.iterator();
			while (resultsItr.hasNext()) {
				resultSetItr = ((Map) resultsItr.next()).entrySet().iterator();
				while (resultSetItr.hasNext()) {
					Map.Entry pair = resultSetItr.next();
					if (pair.getKey().toString().equalsIgnoreCase("value")) {
						totalValue += Integer.valueOf(pair.getValue().toString());
					}
				}
			}
			totalValue=(double) Math.round(totalValue) / 100;
			//System.out.println("Total Value = " + (double) Math.round(totalValue) / 100);
			int newOffSet = limit + offset;

			if (count >= newOffSet) {
				System.out.println("Count: " + count + " ,newOffSet: " + newOffSet + " ,OffSet: " + offset);
				String newDataSet = getPrecipitationData(limit, offset, getStartDate(),getEndDate());
				calculateTotalCount(newDataSet, limit, newOffSet);
			} 
			}//only if the response is not null

		} catch (Exception e) {
			e.printStackTrace();
		}
		return totalValue;
	}

	/**
	 * Returns the yesterday's date in the format of yyyy-MM-dd
	 * @return string
	 */
	private static String getEndDate() {
		Calendar cal = Calendar.getInstance();
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		cal.add(Calendar.DATE, -1);

		return dateFormat.format(cal.getTime());
	}

	/**
	 * Returns the start date fo the year in the format of yyyy-mm-dd
	 * @return string
	 */
	private static String getStartDate() {
		Calendar cal = Calendar.getInstance();
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		cal.set(Calendar.MONTH, 7);//7 for august month starting from 0 to 11
		//System.out.println(cal.getTime());
		return dateFormat.format(cal.getTime());
	}

}
